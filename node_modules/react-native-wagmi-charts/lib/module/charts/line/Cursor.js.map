{"version":3,"sources":["Cursor.tsx"],"names":["React","StyleSheet","LongPressGestureHandler","Animated","runOnJS","useAnimatedGestureHandler","LineChartDimensionsContext","useLineChart","scaleLinear","bisectCenter","CursorContext","createContext","type","LineChartCursor","displayName","linearScalePositionAndIndex","timestamps","width","xToUpdate","currentIndex","xPosition","path","xDomain","domainArray","length","scaleX","domain","range","xRelative","invert","closestIndex","pathDataDelta","Math","abs","curves","closestPathCurve","max","min","p0","to","move","x","value","children","snapToPoint","props","pathWidth","parsedPath","useContext","currentX","isActive","data","onGestureEvent","onActive","boundedX","xValues","map","timestamp","i","minIndex","boundedIndex","round","onEnd","absoluteFill"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport {\n  GestureEvent,\n  LongPressGestureHandler,\n  LongPressGestureHandlerEventPayload,\n  LongPressGestureHandlerProps,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  runOnJS,\n  useAnimatedGestureHandler,\n} from 'react-native-reanimated';\n\nimport { LineChartDimensionsContext } from './Chart';\nimport { useLineChart } from './useLineChart';\nimport { scaleLinear } from 'd3-scale';\nimport { bisectCenter } from 'd3-array';\nimport type { Path } from 'react-native-redash';\n\nexport type LineChartCursorProps = LongPressGestureHandlerProps & {\n  children: React.ReactNode;\n  type: 'line' | 'crosshair';\n  snapToPoint?: boolean;\n};\n\nexport const CursorContext = React.createContext({ type: '' });\n\nLineChartCursor.displayName = 'LineChartCursor';\n\nconst linearScalePositionAndIndex = ({\n  timestamps,\n  width,\n  xToUpdate,\n  currentIndex,\n  xPosition,\n  path,\n  xDomain,\n}: {\n  timestamps: number[];\n  width: number;\n  xToUpdate: Animated.SharedValue<number>;\n  currentIndex: Animated.SharedValue<number>;\n  xPosition: number;\n  path: Path | undefined;\n  xDomain: [number, number] | undefined;\n}) => {\n  if (!path) {\n    return;\n  }\n\n  const domainArray = xDomain ?? [0, timestamps.length];\n\n  // Same scale as in /src/charts/line/utils/getPath.ts\n  const scaleX = scaleLinear().domain(domainArray).range([0, width]);\n\n  // Calculate a scaled timestamp for the current touch position\n  const xRelative = scaleX.invert(xPosition);\n\n  const closestIndex = bisectCenter(timestamps, xRelative);\n  const pathDataDelta = Math.abs(path.curves.length - timestamps.length); // sometimes there is a difference between data length and number of path curves.\n  const closestPathCurve = Math.max(\n    Math.min(bisectCenter(timestamps, xRelative), path.curves.length + 1) -\n      pathDataDelta,\n    0\n  );\n\n  const p0 = (closestIndex > 0 ? path.curves[closestPathCurve].to : path.move)\n    .x;\n  // Update values\n  currentIndex.value = closestIndex;\n  xToUpdate.value = p0;\n};\n\nexport function LineChartCursor({\n  children,\n  snapToPoint,\n  type,\n  ...props\n}: LineChartCursorProps) {\n  const { pathWidth: width, parsedPath } = React.useContext(\n    LineChartDimensionsContext\n  );\n  const { currentX, currentIndex, isActive, data, xDomain } = useLineChart();\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    GestureEvent<LongPressGestureHandlerEventPayload>\n  >({\n    onActive: ({ x }) => {\n      if (parsedPath) {\n        const boundedX = Math.max(0, x <= width ? x : width);\n        isActive.value = true;\n        const xValues = data.map(({ timestamp }, i) =>\n          xDomain ? timestamp : i\n        );\n\n        // on Web, we could drag the cursor to be negative, breaking it\n        // so we clamp the index at 0 to fix it\n        // https://github.com/coinjar/react-native-wagmi-charts/issues/24\n        const minIndex = 0;\n        const boundedIndex = Math.max(\n          minIndex,\n          Math.round(boundedX / width / (1 / (data.length - 1)))\n        );\n\n        if (snapToPoint) {\n          // We have to run this on the JS thread unfortunately as the scaleLinear functions won't work on UI thread\n          runOnJS(linearScalePositionAndIndex)({\n            timestamps: xValues,\n            width,\n            xToUpdate: currentX,\n            currentIndex,\n            xPosition: boundedX,\n            path: parsedPath,\n            xDomain,\n          });\n        } else if (!snapToPoint) {\n          currentX.value = boundedX;\n          currentIndex.value = boundedIndex;\n        }\n      }\n    },\n    onEnd: () => {\n      isActive.value = false;\n      currentIndex.value = -1;\n    },\n  });\n\n  return (\n    <CursorContext.Provider value={{ type }}>\n      <LongPressGestureHandler\n        minDurationMs={0}\n        maxDist={999999}\n        onGestureEvent={onGestureEvent}\n        shouldCancelWhenOutside={false}\n        {...props}\n      >\n        <Animated.View style={StyleSheet.absoluteFill}>\n          {children}\n        </Animated.View>\n      </LongPressGestureHandler>\n    </CursorContext.Provider>\n  );\n}\n"]}