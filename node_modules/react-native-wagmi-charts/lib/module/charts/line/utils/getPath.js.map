{"version":3,"sources":["getPath.ts"],"names":["shape","scaleLinear","getPath","data","from","to","width","height","gutter","_shape","yDomain","xDomain","timestamps","map","timestamp","i","scaleX","domain","Math","min","max","range","scaleY","path","line","defined","d","slice","undefined","find","item","x","_","y","value","curve"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB,C,CACA;;AACA,SAASC,WAAT,QAA4B,UAA5B;AAIA,OAAO,SAASC,OAAT,CAAiB;AACtBC,EAAAA,IADsB;AAEtBC,EAAAA,IAFsB;AAGtBC,EAAAA,EAHsB;AAItBC,EAAAA,KAJsB;AAKtBC,EAAAA,MALsB;AAMtBC,EAAAA,MANsB;AAOtBR,EAAAA,KAAK,EAAES,MAPe;AAQtBC,EAAAA,OARsB;AAStBC,EAAAA;AATsB,CAAjB,EAoBI;AACT,QAAMC,UAAU,GAAGT,IAAI,CAACU,GAAL,CAAS,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgBC,CAAhB,KAAuBJ,OAAO,GAAGG,SAAH,GAAeC,CAAtD,CAAnB;AAEA,QAAMC,MAAM,GAAGf,WAAW,GACvBgB,MADY,CACLN,OADK,aACLA,OADK,cACLA,OADK,GACM,CAACO,IAAI,CAACC,GAAL,CAAS,GAAGP,UAAZ,CAAD,EAA0BM,IAAI,CAACE,GAAL,CAAS,GAAGR,UAAZ,CAA1B,CADN,EAEZS,KAFY,CAEN,CAAC,CAAD,EAAIf,KAAJ,CAFM,CAAf;AAGA,QAAMgB,MAAM,GAAGrB,WAAW,GACvBgB,MADY,CACL,CAACP,OAAO,CAACS,GAAT,EAAcT,OAAO,CAACU,GAAtB,CADK,EAEZC,KAFY,CAEN,CAACd,MAAM,GAAGC,MAAV,EAAkBA,MAAlB,CAFM,CAAf;AAGA,QAAMe,IAAI,GAAGvB,KAAK,CACfwB,IADU,GAEVC,OAFU,CAEDC,CAAD,IACPtB,IAAI,IAAIC,EAAR,GACIF,IAAI,CACDwB,KADH,CACSvB,IADT,EACeC,EAAE,GAAGA,EAAE,GAAG,CAAR,GAAYuB,SAD7B,EAEGC,IAFH,CAESC,IAAD,IAAUA,IAAI,CAAChB,SAAL,KAAmBY,CAAC,CAACZ,SAFvC,CADJ,GAII,IAPK,EASViB,CATU,CASR,CAACC,CAAD,EAAajB,CAAb,KAA2BC,MAAM,CAACL,OAAO,GAAGC,UAAU,CAACG,CAAD,CAAb,GAAmBA,CAA3B,CATzB,EAUVkB,CAVU,CAUPP,CAAD,IAA0BJ,MAAM,CAACI,CAAC,CAACQ,KAAH,CAVxB,EAWVC,KAXU,CAWJ1B,MAXI,EAWIN,IAXJ,CAAb;AAYA,SAAOoB,IAAP;AACD","sourcesContent":["// @ts-ignore\nimport * as shape from 'd3-shape';\n// @ts-ignore\nimport { scaleLinear } from 'd3-scale';\n\nimport type { TLineChartData, YDomain } from '../types';\n\nexport function getPath({\n  data,\n  from,\n  to,\n  width,\n  height,\n  gutter,\n  shape: _shape,\n  yDomain,\n  xDomain,\n}: {\n  data: TLineChartData;\n  from?: number;\n  to?: number;\n  width: number;\n  height: number;\n  gutter: number;\n  shape?: unknown;\n  yDomain: YDomain;\n  xDomain?: [number, number];\n}): string {\n  const timestamps = data.map(({ timestamp }, i) => (xDomain ? timestamp : i));\n\n  const scaleX = scaleLinear()\n    .domain(xDomain ?? [Math.min(...timestamps), Math.max(...timestamps)])\n    .range([0, width]);\n  const scaleY = scaleLinear()\n    .domain([yDomain.min, yDomain.max])\n    .range([height - gutter, gutter]);\n  const path = shape\n    .line()\n    .defined((d: { timestamp: number }) =>\n      from || to\n        ? data\n            .slice(from, to ? to + 1 : undefined)\n            .find((item) => item.timestamp === d.timestamp)\n        : true\n    )\n    .x((_: unknown, i: number) => scaleX(xDomain ? timestamps[i] : i))\n    .y((d: { value: number }) => scaleY(d.value))\n    .curve(_shape)(data);\n  return path;\n}\n"]}