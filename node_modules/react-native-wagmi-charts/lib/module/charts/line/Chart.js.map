{"version":3,"sources":["Chart.tsx"],"names":["React","d3Shape","Dimensions","StyleSheet","View","LineChartContext","LineChartIdProvider","useLineChartData","getArea","getPath","parse","LineChartDimensionsContext","createContext","width","height","pointWidth","parsedPath","path","area","shape","curveBumpX","gutter","pathWidth","screenWidth","get","LineChart","displayName","children","yGutter","id","absolute","props","yDomain","xLength","xDomain","useContext","data","useMemo","allowedWidth","length","dataLength","contextValue","styles","style","create","position"],"mappings":"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","sourcesContent":["import * as React from 'react';\n// @ts-ignore\nimport * as d3Shape from 'd3-shape';\nimport { Dimensions, StyleSheet, View, ViewProps } from 'react-native';\nimport { LineChartContext } from './Context';\nimport { LineChartIdProvider, useLineChartData } from './Data';\n\nimport { getArea, getPath } from './utils';\nimport { parse, Path } from 'react-native-redash';\n\nexport const LineChartDimensionsContext = React.createContext({\n  width: 0,\n  height: 0,\n  pointWidth: 0,\n  parsedPath: {} as Path,\n  path: '',\n  area: '',\n  shape: d3Shape.curveBumpX,\n  gutter: 0,\n  pathWidth: 0,\n});\n\ntype LineChartProps = ViewProps & {\n  children: React.ReactNode;\n  yGutter?: number;\n  width?: number;\n  height?: number;\n  shape?: unknown;\n  /**\n   * If your `LineChart.Provider` uses a dictionary with multiple IDs for multiple paths, then this field is required.\n   */\n  id?: string;\n  absolute?: boolean;\n};\n\nconst { width: screenWidth } = Dimensions.get('window');\n\nLineChart.displayName = 'LineChart';\n\nexport function LineChart({\n  children,\n  yGutter = 16,\n  width = screenWidth,\n  height = screenWidth,\n  shape = d3Shape.curveBumpX,\n  id,\n  absolute,\n  ...props\n}: LineChartProps) {\n  const { yDomain, xLength, xDomain } = React.useContext(LineChartContext);\n  const { data } = useLineChartData({\n    id,\n  });\n\n  const pathWidth = React.useMemo(() => {\n    let allowedWidth = width;\n    if (xLength > data.length) {\n      allowedWidth = (width * data.length) / xLength;\n    }\n    return allowedWidth;\n  }, [data.length, width, xLength]);\n\n  const path = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getPath({\n        data,\n        width: pathWidth,\n        height,\n        gutter: yGutter,\n        shape,\n        yDomain,\n        xDomain,\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain, xDomain]);\n\n  const area = React.useMemo(() => {\n    if (data && data.length > 0) {\n      return getArea({\n        data,\n        width: pathWidth,\n        height,\n        gutter: yGutter,\n        shape,\n        yDomain,\n      });\n    }\n    return '';\n  }, [data, pathWidth, height, yGutter, shape, yDomain]);\n\n  const dataLength = data.length;\n  const parsedPath = React.useMemo(() => parse(path), [path]);\n  const pointWidth = React.useMemo(\n    () => width / (dataLength - 1),\n    [dataLength, width]\n  );\n\n  const contextValue = React.useMemo(\n    () => ({\n      gutter: yGutter,\n      parsedPath,\n      pointWidth,\n      area,\n      path,\n      width,\n      height,\n      pathWidth,\n      shape,\n    }),\n    [\n      yGutter,\n      parsedPath,\n      pointWidth,\n      area,\n      path,\n      width,\n      height,\n      pathWidth,\n      shape,\n    ]\n  );\n\n  return (\n    <LineChartIdProvider id={id}>\n      <LineChartDimensionsContext.Provider value={contextValue}>\n        <View {...props} style={[absolute && styles.absolute, props.style]}>\n          {children}\n        </View>\n      </LineChartDimensionsContext.Provider>\n    </LineChartIdProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  absolute: {\n    position: 'absolute',\n  },\n});\n"]}