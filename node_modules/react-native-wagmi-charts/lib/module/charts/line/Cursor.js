function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import * as React from 'react';
import { StyleSheet } from 'react-native';
import { LongPressGestureHandler } from 'react-native-gesture-handler';
import Animated, { runOnJS, useAnimatedGestureHandler } from 'react-native-reanimated';
import { LineChartDimensionsContext } from './Chart';
import { useLineChart } from './useLineChart';
import { scaleLinear } from 'd3-scale';
import { bisectCenter } from 'd3-array';
export const CursorContext = /*#__PURE__*/React.createContext({
  type: ''
});
LineChartCursor.displayName = 'LineChartCursor';

const linearScalePositionAndIndex = ({
  timestamps,
  width,
  xToUpdate,
  currentIndex,
  xPosition,
  path,
  xDomain
}) => {
  if (!path) {
    return;
  }

  const domainArray = xDomain !== null && xDomain !== void 0 ? xDomain : [0, timestamps.length]; // Same scale as in /src/charts/line/utils/getPath.ts

  const scaleX = scaleLinear().domain(domainArray).range([0, width]); // Calculate a scaled timestamp for the current touch position

  const xRelative = scaleX.invert(xPosition);
  const closestIndex = bisectCenter(timestamps, xRelative);
  const pathDataDelta = Math.abs(path.curves.length - timestamps.length); // sometimes there is a difference between data length and number of path curves.

  const closestPathCurve = Math.max(Math.min(bisectCenter(timestamps, xRelative), path.curves.length + 1) - pathDataDelta, 0);
  const p0 = (closestIndex > 0 ? path.curves[closestPathCurve].to : path.move).x; // Update values

  currentIndex.value = closestIndex;
  xToUpdate.value = p0;
};

export function LineChartCursor({
  children,
  snapToPoint,
  type,
  ...props
}) {
  const {
    pathWidth: width,
    parsedPath
  } = React.useContext(LineChartDimensionsContext);
  const {
    currentX,
    currentIndex,
    isActive,
    data,
    xDomain
  } = useLineChart();
  const onGestureEvent = useAnimatedGestureHandler({
    onActive: ({
      x
    }) => {
      if (parsedPath) {
        const boundedX = Math.max(0, x <= width ? x : width);
        isActive.value = true;
        const xValues = data.map(({
          timestamp
        }, i) => xDomain ? timestamp : i); // on Web, we could drag the cursor to be negative, breaking it
        // so we clamp the index at 0 to fix it
        // https://github.com/coinjar/react-native-wagmi-charts/issues/24

        const minIndex = 0;
        const boundedIndex = Math.max(minIndex, Math.round(boundedX / width / (1 / (data.length - 1))));

        if (snapToPoint) {
          // We have to run this on the JS thread unfortunately as the scaleLinear functions won't work on UI thread
          runOnJS(linearScalePositionAndIndex)({
            timestamps: xValues,
            width,
            xToUpdate: currentX,
            currentIndex,
            xPosition: boundedX,
            path: parsedPath,
            xDomain
          });
        } else if (!snapToPoint) {
          currentX.value = boundedX;
          currentIndex.value = boundedIndex;
        }
      }
    },
    onEnd: () => {
      isActive.value = false;
      currentIndex.value = -1;
    }
  });
  return /*#__PURE__*/React.createElement(CursorContext.Provider, {
    value: {
      type
    }
  }, /*#__PURE__*/React.createElement(LongPressGestureHandler, _extends({
    minDurationMs: 0,
    maxDist: 999999,
    onGestureEvent: onGestureEvent,
    shouldCancelWhenOutside: false
  }, props), /*#__PURE__*/React.createElement(Animated.View, {
    style: StyleSheet.absoluteFill
  }, children)));
}
//# sourceMappingURL=Cursor.js.map